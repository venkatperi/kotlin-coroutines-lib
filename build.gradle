buildscript {
  ext {
    nexusUrl = findProperty('nexusUrl')
    libs = [
        kotlin  : '1.2.30',
        kovenant: '3.3.0',
        dokka   : '0.9.16',
        kotlinx   : '0.22.5',
    ] << (findProperty('libs') ?: [dummy: ""])
  }
  repositories {
    if (nexusUrl)
      maven { url "${nexusUrl}/repository/maven-public/" }
    else {
      mavenCentral()
      jcenter()
      maven { url "https://plugins.gradle.org/m2/" }
    }
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${libs.kotlin}"
    classpath "org.jetbrains.dokka:dokka-gradle-plugin:${libs.dokka}"
    classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.5"
    classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
  }
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.jetbrains.dokka'
apply plugin: "me.champeau.gradle.jmh"
apply plugin: 'org.junit.platform.gradle.plugin'


group = "com.vperi"

ext {
  nexusUrl = findProperty('nexusUrl')
}

repositories {
  if (nexusUrl) {
    maven { url "${nexusUrl}/repository/maven-public/" }
    maven { url 'https://jitpack.io' }
  } else {
    mavenCentral()
    maven { url 'https://jitpack.io' }
  }
}

sourceSets {
  jmh.kotlin.srcDirs += 'src/jmh/kotlin'
}

junitPlatform {
  filters {
    engines {
      include 'spek'
    }
  }
}

dokka {
  includes = ['intro.md']
  outputFormat = 'gfm'
  reportUndocumented = false
  outputDirectory = "$buildDir/gfm"
  packageOptions {
    prefix = "com.vperi.promise.internal"
    suppress = true
  }
  packageOptions {
    prefix = "com.vperi.benchmarks"
    suppress = true
  }
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib:${libs.kotlin}"
  implementation 'com.google.guava:guava:24.0-jre'
  compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:${libs.kotlinx}"
  compile "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${libs.kotlinx}"

  testCompile "org.jetbrains.kotlin:kotlin-reflect:${libs.kotlin}"

  testCompile ('org.jetbrains.spek:spek-api:1.1.5') {
    exclude group: 'org.jetbrains.kotlin'
  }
  testRuntime ('org.jetbrains.spek:spek-junit-platform-engine:1.1.5') {
    exclude group: 'org.junit.platform'
    exclude group: 'org.jetbrains.kotlin'
  }
  testCompile "org.jetbrains.kotlin:kotlin-test-junit:${libs.kotlin}"
  testCompile("junit:junit:4.12")
  testRuntime("org.junit.vintage:junit-vintage-engine:5.1.0")
  testCompile group: 'net.jodah', name: 'concurrentunit', version: '0.4.3'
}

jmh {
  fork = 0
  warmupIterations = 1
  iterations = 10
}

task copyDocs(type: Copy, dependsOn: ["dokka"]) {
  from "$buildDir/gfm/kotlin-coroutines-lib"
  into "$projectDir/docs"
  doLast {
    new File("$projectDir/docs/index.md").renameTo(new File("$projectDir/docs/readme.md"))
  }
}

task docs(dependsOn: ["copyDocs"])

clean.doLast {
  file("$projectDir/docs").deleteDir()
}

kotlin {
  experimental {
    coroutines "enable"
  }
}

tasks.withType(Test) {
  testLogging {
    showStandardStreams = true
    events "passed", "failed"
  }
}

