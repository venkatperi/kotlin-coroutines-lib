$dokka.format:gfm
$dokka.linkExtension:md
$dokka.location:com.vperi.kotlin.collections$asImmutable(kotlin.collections.Iterable((com.vperi.kotlin.collections.asImmutable.T)))com.vperi.kotlin.collections/kotlin.collections.-iterable/as-immutable.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$all(kotlin.collections.Iterable((com.vperi.kotlinx.coroutines.experimental.all.T)), kotlin.coroutines.experimental.CoroutineContext)com.vperi.kotlinx.coroutines.experimental/kotlin.collections.-iterable/all.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$awaitBlocking(kotlinx.coroutines.experimental.Deferred((com.vperi.kotlinx.coroutines.experimental.awaitBlocking.T)))com.vperi.kotlinx.coroutines.experimental/kotlinx.coroutines.experimental.-deferred/await-blocking.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$catch(kotlinx.coroutines.experimental.Job, kotlin.coroutines.experimental.CoroutineContext, kotlinx.coroutines.experimental.Job, kotlin.SuspendFunction1((kotlin.Throwable, kotlin.Unit)))com.vperi.kotlinx.coroutines.experimental/kotlinx.coroutines.experimental.-job/catch.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$completed(kotlin.collections.Iterable((com.vperi.kotlinx.coroutines.experimental.completed.T)), kotlin.coroutines.experimental.CoroutineContext)com.vperi.kotlinx.coroutines.experimental/kotlin.collections.-iterable/completed.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$consumeEachWithStats(kotlinx.coroutines.experimental.channels.ReceiveChannel((com.vperi.kotlinx.coroutines.experimental.consumeEachWithStats.E)), kotlin.SuspendFunction1((com.vperi.kotlinx.coroutines.experimental.consumeEachWithStats.E, kotlin.Unit)))com.vperi.kotlinx.coroutines.experimental/kotlinx.coroutines.experimental.channels.-receive-channel/consume-each-with-stats.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$decodeUtf8(java.nio.ByteBuffer)com.vperi.kotlinx.coroutines.experimental/java.nio.-byte-buffer/decode-utf8.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$failed(kotlin.collections.Iterable((com.vperi.kotlinx.coroutines.experimental.failed.T)), kotlin.coroutines.experimental.CoroutineContext)com.vperi.kotlinx.coroutines.experimental/kotlin.collections.-iterable/failed.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$finally(kotlinx.coroutines.experimental.Job, kotlin.coroutines.experimental.CoroutineContext, kotlinx.coroutines.experimental.Job, kotlin.SuspendFunction1((com.vperi.kotlinx.coroutines.experimental.Result((kotlin.Unit)), )))com.vperi.kotlinx.coroutines.experimental/kotlinx.coroutines.experimental.-job/finally.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$pipe(kotlinx.coroutines.experimental.channels.ReceiveChannel((com.vperi.kotlinx.coroutines.experimental.pipe.E)), com.vperi.kotlinx.coroutines.experimental.TransformChannel((com.vperi.kotlinx.coroutines.experimental.pipe.E, com.vperi.kotlinx.coroutines.experimental.pipe.V)), kotlin.coroutines.experimental.CoroutineContext)com.vperi.kotlinx.coroutines.experimental/kotlinx.coroutines.experimental.channels.-receive-channel/pipe.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$pipe(kotlinx.coroutines.experimental.channels.ReceiveChannel((com.vperi.kotlinx.coroutines.experimental.pipe.T)), kotlinx.coroutines.experimental.channels.SendChannel((com.vperi.kotlinx.coroutines.experimental.pipe.T)), kotlin.coroutines.experimental.CoroutineContext)com.vperi.kotlinx.coroutines.experimental/kotlinx.coroutines.experimental.channels.-receive-channel/pipe.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$race(kotlin.collections.Iterable((com.vperi.kotlinx.coroutines.experimental.race.T)), kotlin.coroutines.experimental.CoroutineContext)com.vperi.kotlinx.coroutines.experimental/kotlin.collections.-iterable/race.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$resultAsync(kotlinx.coroutines.experimental.Deferred((com.vperi.kotlinx.coroutines.experimental.resultAsync.T)))com.vperi.kotlinx.coroutines.experimental/kotlinx.coroutines.experimental.-deferred/result-async.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$resultAsync(kotlinx.coroutines.experimental.Job)com.vperi.kotlinx.coroutines.experimental/kotlinx.coroutines.experimental.-job/result-async.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$sendWithStats(kotlinx.coroutines.experimental.channels.SendChannel((com.vperi.kotlinx.coroutines.experimental.sendWithStats.E)), com.vperi.kotlinx.coroutines.experimental.sendWithStats.E)com.vperi.kotlinx.coroutines.experimental/kotlinx.coroutines.experimental.channels.-send-channel/send-with-stats.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$sequentially(kotlin.collections.Iterable((com.vperi.kotlinx.coroutines.experimental.sequentially.T)), kotlin.coroutines.experimental.CoroutineContext)com.vperi.kotlinx.coroutines.experimental/kotlin.collections.-iterable/sequentially.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$stats#kotlinx.coroutines.experimental.channels.ReceiveChannel((com.vperi.kotlinx.coroutines.experimental.stats.T))com.vperi.kotlinx.coroutines.experimental/kotlinx.coroutines.experimental.channels.-receive-channel/stats.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$stats#kotlinx.coroutines.experimental.channels.SendChannel((com.vperi.kotlinx.coroutines.experimental.stats.T))com.vperi.kotlinx.coroutines.experimental/kotlinx.coroutines.experimental.channels.-send-channel/stats.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$succeeded(kotlin.collections.Iterable((com.vperi.kotlinx.coroutines.experimental.succeeded.T)), kotlin.coroutines.experimental.CoroutineContext)com.vperi.kotlinx.coroutines.experimental/kotlin.collections.-iterable/succeeded.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$then(kotlinx.coroutines.experimental.Job, kotlin.coroutines.experimental.CoroutineContext, kotlinx.coroutines.experimental.Job, kotlin.SuspendFunction0((kotlin.Unit)))com.vperi.kotlinx.coroutines.experimental/kotlinx.coroutines.experimental.-job/then.md
$dokka.location:com.vperi.kotlinx.coroutines.experimental$then(kotlinx.coroutines.experimental.Job, kotlin.coroutines.experimental.CoroutineContext, kotlinx.coroutines.experimental.Job, kotlin.SuspendFunction0((kotlin.Unit)), kotlin.SuspendFunction1((kotlin.Throwable, kotlin.Unit)))com.vperi.kotlinx.coroutines.experimental/kotlinx.coroutines.experimental.-job/then.md
com.vperi.kotlin.collections
com.vperi.kotlin.test
com.vperi.kotlinx.coroutines.experimental
